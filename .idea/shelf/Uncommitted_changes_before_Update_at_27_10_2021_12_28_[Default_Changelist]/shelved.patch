Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.contagiapp\">\r\n\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> <!-- per google maps -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> <!-- per bluetooth (anche low energy) -->\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.bluetooth_le\"\r\n        android:required=\"false\" />\r\n\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:largeHeap=\"true\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\".impostazioni.SegnalaNegativita\" />\r\n        <activity\r\n            android:name=\".impostazioni.SegnalaPositivitaActivity\"\r\n            android:parentActivityName=\".impostazioni.SettingActivity\" />\r\n        <activity\r\n            android:name=\".impostazioni.EventsPartecipatoPositivo\"\r\n            android:parentActivityName=\".impostazioni.SegnalaPositivitaActivity\" />\r\n        <activity android:name=\".data.amici.ProfiloUtentiActivity\" />\r\n        <activity android:name=\".data.amici.AddFriendsActivity\" />\r\n        <activity android:name=\".gruppi.InvitaAmiciGruppoActivity\" />\r\n        <activity\r\n            android:name=\".gruppi.AddImgGruppoActivity\"\r\n            android:parentActivityName=\".gruppi.CreaGruppoActivity\" />\r\n        <activity android:name=\".gruppi.CreaGruppoActivity\" />\r\n        <activity\r\n            android:name=\".impostazioni.SettingActivity\"\r\n            android:label=\"@string/settings\" />\r\n        <activity\r\n            android:name=\".registrazione.RegistrationActivity\"\r\n            android:parentActivityName=\".WelcomeActivity\" />\r\n        <activity\r\n            android:name=\".ui.login.LoginActivity\"\r\n            android:parentActivityName=\".WelcomeActivity\" />\r\n        <activity\r\n            android:name=\".LaunchScreenActivity\"\r\n            android:theme=\"@style/LauncherTheme\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".utente.ProfiloActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.ProfiloActivity\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".WelcomeActivity\"\r\n            android:theme=\"@style/NoActionBar\" />\r\n        <activity android:name=\".MainActivity\" />\r\n        <activity android:name=\".eventi.NewEventsActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.NewEventsActivity\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".utente.ModificaUtenteActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.ModificaUtenteActivity\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.gms.version\"\r\n            android:value=\"@integer/google_play_services_version\" />\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"${mapsApiKey}\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\" />\r\n        </provider>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
+++ app/src/main/AndroidManifest.xml	(date 1635248459902)
@@ -44,6 +44,7 @@
         <activity
             android:name=".impostazioni.SettingActivity"
             android:label="@string/settings" />
+        <activity android:name=".notifiche.Smistamento" />
         <activity
             android:name=".registrazione.RegistrationActivity"
             android:parentActivityName=".WelcomeActivity" />
Index: app/src/main/java/com/example/contagiapp/notifiche/NotifyFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.contagiapp.notifiche;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.util.Log;\r\nimport android.view.GestureDetector;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.contagiapp.R;\r\nimport com.example.contagiapp.eventi.EliminazionePartecipazioneEvento;\r\nimport com.example.contagiapp.eventi.Evento;\r\nimport com.example.contagiapp.eventi.ProfiloEventoAdminFragment;\r\nimport com.example.contagiapp.gruppi.Gruppo;\r\nimport com.example.contagiapp.impostazioni.EventiPartecipatoAdapter;\r\nimport com.example.contagiapp.impostazioni.EventsPartecipatoPositivo;\r\nimport com.example.contagiapp.utente.Utente;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.Query;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Timestamp;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * A simple {@link Fragment} subclass.\r\n */\r\npublic class NotifyFragment extends Fragment {\r\n\r\n    private FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    private ArrayList<String> idList = new ArrayList<String>(); //lista che conterrà gli id cioè le mail degli utenti\r\n    private RecyclerView rvEventiACuiPartecipo;\r\n    private RecyclerView rvEventiRossi;\r\n    private ArrayList<Evento> listaEventi = new ArrayList<Evento>();\r\n    private Evento ev;\r\n    private Utente utente;\r\n    private final List<Evento> ev1 = new ArrayList<>();\r\n    private boolean contro = false;\r\n    //private List<Evento> eventi = new ArrayList<>();\r\n\r\n    public NotifyFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view;\r\n        view = inflater.inflate(R.layout.fragment_notify, container, false);\r\n\r\n        RecyclerView rvNoEventiPartecipazione = view.findViewById(R.id.rvNoPartecipazioneEvento);\r\n        rvEventiRossi = view.findViewById(R.id.rvEventiRossi);\r\n        final RecyclerView recyclerViewRichieste =  view.findViewById(R.id.rvRichieste);\r\n        final RecyclerView recyclerViewInviti =  view.findViewById(R.id.rvInviti);\r\n        rvEventiACuiPartecipo = view.findViewById(R.id.rvEventiACuiPartecipo);\r\n\r\n        String mailUtenteLoggato = getMailUtenteLoggato();\r\n        //Otteniamo la lista della mail degli amici\r\n        db.collection(\"Utenti\")\r\n                .document(mailUtenteLoggato)\r\n                .get()\r\n                .addOnCompleteListener(new OnCompleteListener() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task task) {\r\n                        DocumentSnapshot document = (DocumentSnapshot) task.getResult();\r\n                        ArrayList<String> listaMailRichieste = (ArrayList<String>) document.get(\"richiesteRicevute\");\r\n                        ArrayList<String> listaInviti = (ArrayList<String>) document.get(\"invitiRicevuti\");\r\n\r\n                        Log.d(\"listaMailRichieste\", String.valueOf(listaMailRichieste));\r\n                        Log.d(\"listaInviti\", String.valueOf(listaInviti));\r\n                        getRichieste(listaMailRichieste, recyclerViewRichieste);\r\n                        getInviti(listaInviti, recyclerViewInviti);\r\n\r\n                        utente = document.toObject(Utente.class);\r\n                    }\r\n                });\r\n\r\n        caricaEventi(rvEventiACuiPartecipo);\r\n        caricaEventiRossi(rvEventiRossi);\r\n        caricaEventiNoPartecipazione(rvNoEventiPartecipazione);\r\n\r\n        return view;\r\n    }\r\n\r\n    public void caricaEventiNoPartecipazione(final RecyclerView rvEventiACuiNonPartecipo) {\r\n        SharedPreferences pref = getActivity().getApplicationContext().getSharedPreferences(\"eventi\", Context.MODE_PRIVATE);\r\n        String json = pref.getString(\"id\", \"no\");\r\n\r\n        if(!json.equals(\"no\")) {\r\n            Gson gson = new Gson();\r\n            final ArrayList<String> eventi;\r\n            eventi = gson.fromJson(json, new TypeToken<ArrayList<String>>() {}.getType());\r\n\r\n            if(eventi.size() != 0) {\r\n                for(int i = 0; i < eventi.size(); i++) {\r\n                    String id = eventi.get(i);\r\n\r\n                    db.collection(\"Eventi\")\r\n                            .document(id)\r\n                            .get()\r\n                            .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                                @Override\r\n                                public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                                    ev1.add(documentSnapshot.toObject(Evento.class));\r\n                                    Log.d(\"EVENTI:::\",documentSnapshot.toObject(Evento.class).getIdEvento());\r\n\r\n                                    if(ev1.size() == eventi.size()) {\r\n                                        EventoNoPartecipazioneAdapter adapter = new EventoNoPartecipazioneAdapter(ev1, getActivity().getApplicationContext());\r\n\r\n                                        rvEventiACuiNonPartecipo.setAdapter(adapter);\r\n                                        rvEventiACuiNonPartecipo.setLayoutManager(new LinearLayoutManager(getActivity()));\r\n                                    }\r\n                                }\r\n                            });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void caricaEventiRossi(final RecyclerView rvEventi) {\r\n\r\n        final ArrayList<Evento> eventi = new ArrayList<>();\r\n\r\n        db.collection(\"Eventi\")\r\n                .whereArrayContains(\"partecipanti\", getMailUtenteLoggato())\r\n                .whereEqualTo(\"statoRosso\",true)\r\n                .get()\r\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                        if(task.isSuccessful()) {\r\n                            for(QueryDocumentSnapshot document : task.getResult()) {\r\n                                ev = document.toObject(Evento.class);\r\n\r\n                                try {\r\n                                    Date dataRosso = new SimpleDateFormat(\"dd/MM/yyyy\").parse(ev.getDataRosso());\r\n                                    Date dataAttuale = new Date(System.currentTimeMillis());\r\n\r\n                                    //864000000 millisecondi = 10 giorni\r\n                                    if(dataAttuale.getTime() - dataRosso.getTime() <= 864000000) {\r\n                                        eventi.add(ev);\r\n                                    }\r\n                                } catch (ParseException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n\r\n                            EventoRossoAdapter adapter = new EventoRossoAdapter(getContext(), eventi, getMailUtenteLoggato(), utente);\r\n\r\n                            rvEventi.setAdapter(adapter);\r\n                            rvEventi.setLayoutManager(new LinearLayoutManager(getActivity()));\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void getRichieste(ArrayList<String> listaRichieste, final RecyclerView recyclerView){\r\n        /*\r\n        metodo che svolge le seguenti operazioni:\r\n         1)date in input le mail degli amici ottiene, per ciascuno, i seguenti dati dal database: nome, cognome, mail\r\n         2)crea per ognuno un nuovo tipo Utente che aggiunge ad una lista\r\n         3) passa la lista all'adapter del recycler View che poi permetterà la visualizzazione della lista di CardView degli amici sull'app\r\n         */\r\n\r\n        final ArrayList<Utente> utenti = new ArrayList<Utente>();\r\n        for(int i=0; i < listaRichieste.size(); i++){\r\n            db.collection(\"Utenti\")\r\n                    .document(listaRichieste.get(i))\r\n                    .get()\r\n                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                        @Override\r\n                        public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                            Utente user = new Utente();\r\n                            user.setNome(documentSnapshot.getString(\"nome\"));\r\n                            user.setCognome(documentSnapshot.getString(\"cognome\"));\r\n                            user.setMail(documentSnapshot.getString(\"mail\"));\r\n                            user.setDataNascita(documentSnapshot.getString(\"dataNascita\"));\r\n                            user.setCitta(documentSnapshot.getString(\"citta\"));\r\n                            user.setAmici((ArrayList<String>) documentSnapshot.get(\"amici\"));\r\n                            user.setRichiesteRicevute((ArrayList<String>) documentSnapshot.get(\"richiesteRicevute\"));\r\n\r\n                            Log.d(\"amici\", String.valueOf(user.getAmici()));\r\n\r\n\r\n                            utenti.add(user);\r\n                            Log.d(\"richiesteSize\", String.valueOf(utenti.size()));\r\n\r\n                            db.collection(\"Utenti\").document(getMailUtenteLoggato())\r\n                                    .get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                                @Override\r\n                                public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                                    DocumentSnapshot document = (DocumentSnapshot) task.getResult();\r\n\r\n                                }\r\n                            });\r\n\r\n                            //\r\n                            //apro il documento dell'utente loggato\r\n                            //nell'adapter vengono aggiornati gli amici al click del bottone Accetta\r\n                            db.collection(\"Utenti\").document(getMailUtenteLoggato())\r\n                                    .get()\r\n                                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                                        @Override\r\n                                        public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                                            if (documentSnapshot.exists()){\r\n                                                final Utente utenteLoggato = documentSnapshot.toObject(Utente.class);\r\n                                                RichiesteAdapter adapter = new RichiesteAdapter(utenti, getMailUtenteLoggato(), utenteLoggato);\r\n                                                recyclerView.setAdapter(adapter);\r\n                                                recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\r\n\r\n                                            }else {\r\n                                                Toast.makeText(getActivity(), \"Documents does not exist\", Toast.LENGTH_SHORT);\r\n                                            }\r\n                                        }\r\n                                    });\r\n\r\n                            //RichiesteAdapter adapter = new RichiesteAdapter(utenti, getMailUtenteLoggato(), utenteLoggato);\r\n\r\n                            String id = user.getMail();\r\n                            idList.add(id);\r\n\r\n\r\n\r\n/*\r\n                            recyclerView.addOnItemTouchListener(new NotifyFragment.RecyclerTouchListener(getActivity(), recyclerView, new NotifyFragment.RecyclerTouchListener.ClickListener() {\r\n                                @Override\r\n                                public void onClick(View view, int position) {\r\n                                    String idUtenteSelezionato = idList.get(position);\r\n                                    Log.i(\"idList: \", idUtenteSelezionato);\r\n\r\n                                    Intent profiloIntent = new Intent(getActivity(), ProfiloUtentiActivity.class);\r\n                                    profiloIntent.putExtra(\"id\", idUtenteSelezionato);\r\n                                    startActivity(profiloIntent);\r\n                                }\r\n\r\n                                @Override\r\n                                public void onLongClick(View view, int position) {\r\n\r\n                                }\r\n\r\n                            }));\r\n                            */\r\n\r\n                        }\r\n                    }).addOnFailureListener(new OnFailureListener() {\r\n                @Override\r\n                public void onFailure(@NonNull Exception e) {\r\n                    Log.d(\"error\", \"errore\");\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public void getInviti(final ArrayList<String> listaInviti, final RecyclerView recyclerView){\r\n\r\n\r\n        final ArrayList<Gruppo> gruppi = new ArrayList<Gruppo>();\r\n        for(int i=0; i < listaInviti.size(); i++){\r\n            db.collection(\"Gruppo\")\r\n                    .document(listaInviti.get(i))\r\n                    .get()\r\n                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                        @Override\r\n                        public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                            Gruppo gruppo = new Gruppo();\r\n                            gruppo.setNomeGruppo(documentSnapshot.getString(\"nomeGruppo\"));\r\n                            gruppo.setAdmin(documentSnapshot.getString(\"admin\"));\r\n                            gruppo.setDescrizione(documentSnapshot.getString(\"descrizione\"));\r\n                            gruppo.setIdGruppo(documentSnapshot.getString(\"idGruppo\"));\r\n                            //gruppo.setNroPartecipanti((Integer) documentSnapshot.get(\"nroPartecipanti\"));\r\n                            gruppo.setPartecipanti((ArrayList<String>) documentSnapshot.get(\"partecipanti\"));\r\n                            Log.d(\"setPartecipanti\", String.valueOf((ArrayList<String>) documentSnapshot.get(\"partecipanti\")));\r\n\r\n                            Log.d(\"idGruppo\", String.valueOf(documentSnapshot.getString(\"idGruppo\")));\r\n\r\n\r\n                            gruppi.add(gruppo);\r\n                            Log.d(\"gruppi.size()\", String.valueOf(gruppi.size()));\r\n\r\n\r\n\r\n                            db.collection(\"Utenti\").document(getMailUtenteLoggato())\r\n                                    .get()\r\n                                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                                        @Override\r\n                                        public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                                            if (documentSnapshot.exists()){\r\n                                                final Utente utenteLoggato = documentSnapshot.toObject(Utente.class);\r\n                                                utenteLoggato.setInvitiRicevuti(listaInviti);\r\n                                                InvitiAdapter adapter = new InvitiAdapter(gruppi, getMailUtenteLoggato(), utenteLoggato);\r\n                                                recyclerView.setAdapter(adapter);\r\n                                                recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\r\n\r\n                                            }else {\r\n                                                Toast.makeText(getActivity(), \"Documents does not exist\", Toast.LENGTH_SHORT);\r\n                                            }\r\n                                        }\r\n                                    });\r\n\r\n                        }\r\n                    }).addOnFailureListener(new OnFailureListener() {\r\n                @Override\r\n                public void onFailure(@NonNull Exception e) {\r\n                    Log.d(\"error\", \"errore\");\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private String getMailUtenteLoggato(){\r\n        Gson gson = new Gson();\r\n        SharedPreferences prefs = getActivity().getApplicationContext().getSharedPreferences(\"Login\", Context.MODE_PRIVATE);\r\n        String json = prefs.getString(\"utente\", \"no\");\r\n        String mailUtenteLoggato;\r\n        //TODO capire il funzionamento\r\n        if(!json.equals(\"no\")) {\r\n            Utente utente = gson.fromJson(json, Utente.class);\r\n            mailUtenteLoggato = utente.getMail();\r\n            Log.d(\"mailutenteLoggato\", mailUtenteLoggato);\r\n        } else {\r\n            SharedPreferences prefs1 = getActivity().getApplicationContext().getSharedPreferences(\"LoginTemporaneo\",Context.MODE_PRIVATE);\r\n            mailUtenteLoggato = prefs1.getString(\"mail\", \"no\");\r\n            Log.d(\"mail\", mailUtenteLoggato);\r\n        }\r\n        return mailUtenteLoggato;\r\n    }\r\n\r\n    private void caricaEventi(final RecyclerView rvEventi){\r\n\r\n        listaEventi = new ArrayList<Evento>();\r\n\r\n\r\n        db.collection(\"Eventi\")\r\n                //.whereArrayContains(\"partecipanti\", getMailUtenteLoggato())\r\n                .orderBy(\"data\", Query.Direction.ASCENDING)\r\n                .get()\r\n                .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {\r\n\r\n                        for(DocumentSnapshot documentSnapshot : queryDocumentSnapshots){\r\n                            Evento evento = documentSnapshot.toObject(Evento.class);\r\n\r\n                            try {\r\n                                Date dataEvento = new SimpleDateFormat(\"dd/MM/yyyy\").parse(evento.getData());\r\n                                Date dataAttuale = new Date(System.currentTimeMillis());\r\n\r\n                                if(dataEvento.compareTo(dataAttuale) >= 0\r\n                                        && (evento.getPartecipanti().contains(getMailUtenteLoggato()) ||\r\n                                        evento.getAdmin().equals(getMailUtenteLoggato()))) {\r\n\r\n                                    listaEventi.add(evento);\r\n\r\n                                    String id = documentSnapshot.getId();\r\n                                    idList.add(id);\r\n                                }\r\n                            } catch (ParseException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n                        EventPartecipanteAdapter adapter = new EventPartecipanteAdapter(listaEventi);\r\n\r\n                        rvEventi.setAdapter(adapter);\r\n                        rvEventi.setLayoutManager(new LinearLayoutManager(getActivity()));\r\n\r\n\r\n                        rvEventi.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), rvEventi, new RecyclerTouchListener.ClickListener() {\r\n                            @Override\r\n                            public void onClick(View view, int position) {\r\n                                Evento evento = listaEventi.get(position);\r\n                                if(evento.getAdmin().equals(getMailUtenteLoggato())) {\r\n                                    ProfiloEventoAdminFragment fragment = new ProfiloEventoAdminFragment();\r\n\r\n                                    Bundle bundle = new Bundle();\r\n                                    bundle.putString(\"idEvento\", idList.get(position));\r\n\r\n                                    fragment.setArguments(bundle);\r\n\r\n                                    //richiamo il fragment\r\n\r\n                                    FragmentTransaction fr = getActivity().getSupportFragmentManager().beginTransaction();\r\n                                    fr.replace(R.id.container,fragment);\r\n                                    fr.addToBackStack(null); //serve per tornare al fragment precedente\r\n                                    fr.commit();\r\n                                }\r\n\r\n                                if(evento.getPartecipanti().contains(getMailUtenteLoggato())) {\r\n                                    EliminazionePartecipazioneEvento fragment = new EliminazionePartecipazioneEvento();\r\n\r\n                                    Bundle bundle = new Bundle();\r\n                                    bundle.putString(\"idEvento\", idList.get(position));\r\n                                    bundle.putBoolean(\"partenza\", true);\r\n\r\n                                    fragment.setArguments(bundle);\r\n\r\n                                    //richiamo il fragment\r\n\r\n                                    FragmentTransaction fr = getActivity().getSupportFragmentManager().beginTransaction();\r\n                                    fr.replace(R.id.container,fragment);\r\n                                    fr.addToBackStack(null); //serve per tornare al fragment precedente\r\n                                    fr.commit();\r\n                                }\r\n                            }\r\n                            @Override\r\n                            public void onLongClick(View view, int position) {\r\n\r\n                            }\r\n\r\n                        }));\r\n                    }\r\n                }); //toDo onFailure\r\n    }\r\n\r\n\r\n}\r\n\r\n//TODO vedere se la partecipazione all'evento la vede solo chi si è iscritto all'evento come gruppo o tutto il gruppo\r\n//per il click\r\nclass RecyclerTouchListener implements RecyclerView.OnItemTouchListener {\r\n    private GestureDetector gestureDetector;\r\n    private RecyclerTouchListener.ClickListener clickListener;\r\n\r\n    public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final RecyclerTouchListener.ClickListener clickListener) {\r\n        this.clickListener = (ClickListener) clickListener;\r\n        gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {\r\n            @Override\r\n            public boolean onSingleTapUp(MotionEvent e) {\r\n                return true;\r\n            }\r\n\r\n            public void onLongPress(MotionEvent e) {\r\n                View child = recyclerView.findChildViewUnder(e.getX(), e.getY());\r\n                if (child != null && clickListener != null) {\r\n                    clickListener.onLongClick(child, recyclerView.getChildAdapterPosition(child));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public boolean onInterceptTouchEvent(@NonNull RecyclerView rv, @NonNull MotionEvent e) {\r\n        View child = rv.findChildViewUnder(e.getX(), e.getY());\r\n\r\n        if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {\r\n            clickListener.onClick(child, rv.getChildAdapterPosition(child));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void onTouchEvent(@NonNull RecyclerView rv, @NonNull MotionEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {\r\n\r\n    }\r\n\r\n    public interface ClickListener {\r\n        void onClick(View view, int position);\r\n\r\n        void onLongClick(View view, int position);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/contagiapp/notifiche/NotifyFragment.java	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
+++ app/src/main/java/com/example/contagiapp/notifiche/NotifyFragment.java	(date 1635248166962)
@@ -110,7 +110,7 @@
     }
 
     public void caricaEventiNoPartecipazione(final RecyclerView rvEventiACuiNonPartecipo) {
-        SharedPreferences pref = getActivity().getApplicationContext().getSharedPreferences("eventi", Context.MODE_PRIVATE);
+        final SharedPreferences pref = getActivity().getApplicationContext().getSharedPreferences("eventi", Context.MODE_PRIVATE);
         String json = pref.getString("id", "no");
 
         if(!json.equals("no")) {
@@ -122,14 +122,25 @@
                 for(int i = 0; i < eventi.size(); i++) {
                     String id = eventi.get(i);
 
+                    final int finalI = i;
                     db.collection("Eventi")
                             .document(id)
                             .get()
                             .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
                                 @Override
                                 public void onSuccess(DocumentSnapshot documentSnapshot) {
-                                    ev1.add(documentSnapshot.toObject(Evento.class));
-                                    Log.d("EVENTI:::",documentSnapshot.toObject(Evento.class).getIdEvento());
+                                    try {
+                                        ev1.add(documentSnapshot.toObject(Evento.class));
+                                        Log.d("EVENTI:::",documentSnapshot.toObject(Evento.class).getIdEvento());
+                                    } catch (NullPointerException e) {
+                                        eventi.remove(finalI);
+
+                                        SharedPreferences.Editor editor = pref.edit();
+                                        Gson gson1 = new Gson();
+                                        String json1 = gson1.toJson(eventi);
+                                        editor.putString("id", json1);
+                                        editor.commit();
+                                    }
 
                                     if(ev1.size() == eventi.size()) {
                                         EventoNoPartecipazioneAdapter adapter = new EventoNoPartecipazioneAdapter(ev1, getActivity().getApplicationContext());
Index: app/src/main/java/com/example/contagiapp/notifiche/Notifiche.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.contagiapp.notifiche;\r\n\r\nimport android.app.Notification;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\n\r\nimport com.example.contagiapp.MainActivity;\r\nimport com.example.contagiapp.R;\r\nimport com.example.contagiapp.eventi.Evento;\r\nimport com.example.contagiapp.gruppi.Gruppo;\r\nimport com.example.contagiapp.utente.Utente;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.gson.Gson;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\n//classe che crea e mostra notifiche nella barra delle notifiche android\r\npublic class Notifiche {\r\n    private static final String TAG = \"Notifiche.java\";\r\n    private MainActivity mainActivity;\r\n    private FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    private Bitmap bitMap;\r\n    private final StorageReference storageRef = FirebaseStorage.getInstance().getReference();\r\n    private static final String GROUP_KEY_WORK = \"NOTIFY\";\r\n\r\n    public Notifiche(MainActivity mainActivity) {\r\n        this.mainActivity = mainActivity;\r\n\r\n        invitiAmici();\r\n    }\r\n\r\n    private void invitiAmici() {\r\n\r\n        db.collection(\"Utenti\")\r\n                .document(getMailUtenteLoggato())\r\n                .get()\r\n                .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onSuccess(final DocumentSnapshot documentSnapshot) {\r\n                        Utente utente = documentSnapshot.toObject(Utente.class);\r\n                        final ArrayList<String> invitiAmici = utente.getRichiesteRicevute();\r\n                        final ArrayList<Notification> notifiche = new ArrayList<>();\r\n\r\n                        boolean controllo = false;\r\n                        for(int i = 0; i < invitiAmici.size(); i++) {\r\n                            if(i == invitiAmici.size()-1) controllo = true;\r\n                            final boolean finalControllo = controllo;\r\n\r\n                            db.collection(\"Utenti\")\r\n                                    .document(invitiAmici.get(i))\r\n                                    .get()\r\n                                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                                        @Override\r\n                                        public void onSuccess(@NonNull DocumentSnapshot documentSnapshot1) {\r\n                                            Utente ut = documentSnapshot1.toObject(Utente.class);\r\n\r\n                                            //TODO non riesco a caricare l'immagine dell'utente\r\n                                            //caricaImgDaStorage(\"imgUtenti\", ut.getMail());\r\n                                            Notification newMessageNotification1 =\r\n                                                    new NotificationCompat.Builder(mainActivity, \"CHANNEL_ID\")\r\n                                                            .setSmallIcon(R.drawable.ic_friends)\r\n                                                            .setSubText(\"Richiesta di amicizia\")\r\n                                                            .setLargeIcon(bitMap)\r\n                                                            /*.setStyle(new NotificationCompat.BigPictureStyle()\r\n                                                                    .bigPicture(bitMap)\r\n                                                                    .bigLargeIcon(null))*/\r\n                                                            .setContentText(\"Città: \"+ut.getCitta()+\"\\nData di nascita: \"+ut.getDataNascita())\r\n                                                            .setContentTitle(ut.getCognome()+\" \"+ut.getNome())\r\n                                                            .setGroup(GROUP_KEY_WORK)\r\n                                                            .build();\r\n\r\n                                            notifiche.add(newMessageNotification1);\r\n\r\n                                            if(finalControllo) richiesteGruppi(notifiche);\r\n                                        }\r\n                                    });\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void richiesteGruppi(final ArrayList<Notification> notifiche) {\r\n\r\n        db.collection(\"Utenti\")\r\n                .document(getMailUtenteLoggato())\r\n                .get()\r\n                .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                Utente utente = documentSnapshot.toObject(Utente.class);\r\n                final ArrayList<String> richiesteGruppi = utente.getInvitiRicevuti();\r\n\r\n                boolean controllo = false;\r\n                for(int i = 0; i < richiesteGruppi.size(); i++) {\r\n                    if(i == richiesteGruppi.size()-1) controllo = true;\r\n                    final boolean finalControllo = controllo;\r\n\r\n                    db.collection(\"Gruppo\")\r\n                            .document(richiesteGruppi.get(i))\r\n                            .get()\r\n                            .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                        @Override\r\n                        public void onSuccess(@NonNull DocumentSnapshot documentSnapshot1) {\r\n                            final Gruppo grup = documentSnapshot1.toObject(Gruppo.class);\r\n\r\n                            db.collection(\"Utenti\")\r\n                                    .document(grup.getAdmin())\r\n                                    .get()\r\n                                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                                @Override\r\n                                public void onSuccess(DocumentSnapshot documentSnapshot2) {\r\n                                    Utente admin = documentSnapshot2.toObject(Utente.class);\r\n\r\n                                    Notification newMessageNotification1 =\r\n                                            new NotificationCompat.Builder(mainActivity, \"CHANNEL_ID\")\r\n                                                    .setSmallIcon(R.drawable.ic_group_black_24dp)\r\n                                                    .setSubText(\"Unisciti al gruppo\")\r\n                                                    .setLargeIcon(bitMap)\r\n                                                    /*.setStyle(new NotificationCompat.BigPictureStyle()\r\n                                                            .bigPicture(bitMap)\r\n                                                            .bigLargeIcon(null))*/\r\n                                                    .setContentTitle(\"Amministratore gruppo: \"+admin.getCognome()+\" \"+admin.getNome())\r\n                                                    .setContentText(\"Nome gruppo: \"+grup.getNomeGruppo()+\" Partecipanti: \"+grup.getNroPartecipanti())\r\n                                                    .setGroup(GROUP_KEY_WORK)\r\n                                                    .build();\r\n\r\n                                    notifiche.add(newMessageNotification1);\r\n\r\n                                    if(finalControllo) eventi(notifiche);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void eventi(final ArrayList<Notification> notifiche) {\r\n\r\n        db.collection(\"Eventi\")\r\n                .whereArrayContains(\"partecipanti\",getMailUtenteLoggato())\r\n                .get()\r\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                if(task.isSuccessful()) {\r\n\r\n                    for(DocumentSnapshot documentSnapshot : task.getResult()) {\r\n                        Evento evento = documentSnapshot.toObject(Evento.class);\r\n\r\n                        try {\r\n                            Date dataEvento = new SimpleDateFormat(\"dd/MM/yyyy\").parse(evento.getData());\r\n                            Date dataAttuale = new Date(System.currentTimeMillis());\r\n\r\n                            //86400000 millisecondi = 1 giorno\r\n                            if((dataAttuale.getTime() - dataEvento.getTime()) <= 86400000) {\r\n                                Notification newMessageNotification1 =\r\n                                        new NotificationCompat.Builder(mainActivity, \"CHANNEL_ID\")\r\n                                                .setSmallIcon(R.drawable.ic_event_black_24dp)\r\n                                                .setSubText(\"Ti ricordiamo l'evento \"+evento.getNome())\r\n                                                .setLargeIcon(bitMap)\r\n                                                /*.setStyle(new NotificationCompat.BigPictureStyle()\r\n                                                        .bigPicture(bitMap)\r\n                                                        .bigLargeIcon(null))*/\r\n                                                .setContentText(\"Città: \"+evento.getCitta())\r\n                                                .setContentTitle(\"Data: \"+evento.getData()+\" \"+evento.getOrario())\r\n                                                .setGroup(GROUP_KEY_WORK)\r\n                                                .build();\r\n\r\n                                notifiche.add(newMessageNotification1);\r\n                            }\r\n                        } catch (ParseException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n\r\n                    statoXTampone(notifiche);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void statoXTampone(final ArrayList<Notification> notifiche) {\r\n\r\n        db.collection(\"Utenti\")\r\n                .document(getMailUtenteLoggato())\r\n                .get()\r\n                .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                String stato = documentSnapshot.toObject(Utente.class).getStato();\r\n\r\n                if(stato.equals(\"arancione\") || stato.equals(\"giallo\")) {\r\n\r\n                    Notification newMessageNotification1 =\r\n                            new NotificationCompat.Builder(mainActivity, \"CHANNEL_ID\")\r\n                                    .setSmallIcon(R.drawable.ic_account_circle_black_24dp)\r\n                                    .setSubText(\"Stato\")\r\n                                    .setContentTitle(\"Ti ricordo che il tuo stato è \"+stato+\"\\n\")\r\n                                    .setContentText(\"Fai un tampone al più presto\")\r\n                                    .setLargeIcon(bitMap)\r\n                                    /*.setStyle(new NotificationCompat.BigPictureStyle()\r\n                                            .bigPicture(bitMap)\r\n                                            .bigLargeIcon(null))*/\r\n                                    .setGroup(GROUP_KEY_WORK)\r\n                                    .build();\r\n\r\n                    notifiche.add(newMessageNotification1);\r\n\r\n                    Notification summaryNotification =\r\n                            new NotificationCompat.Builder(mainActivity, \"CHANNEL_ID\")\r\n                                    .setContentTitle(\"Notifiche\")\r\n                                    //set content text to support devices running API level < 24\r\n                                    .setContentText(\"Notifiche\")\r\n                                    .setSmallIcon(R.mipmap.ic_launcher)\r\n                                    //build summary info into InboxStyle template\r\n                                    .setStyle(new NotificationCompat.InboxStyle()\r\n                                            .setSummaryText(\"Notifiche\"))\r\n                                    //specify which group this notification belongs to\r\n                                    .setGroup(GROUP_KEY_WORK)\r\n                                    //set this notification as the summary for the group\r\n                                    .setGroupSummary(true)\r\n                                    .build();\r\n\r\n                    NotificationManagerCompat notificationManager = NotificationManagerCompat.from(mainActivity);\r\n                    for(int j = 0; j < notifiche.size(); j++) {\r\n                        notificationManager.notify(j, notifiche.get(j));\r\n                    }\r\n                    notificationManager.notify(10, summaryNotification);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private String getMailUtenteLoggato(){\r\n        Gson gson = new Gson();\r\n        SharedPreferences prefs = mainActivity.getSharedPreferences(\"Login\", Context.MODE_PRIVATE);\r\n        String json = prefs.getString(\"utente\", \"no\");\r\n        String mailUtenteLoggato;\r\n\r\n        if(!json.equals(\"no\")) {\r\n            Utente utente = gson.fromJson(json, Utente.class);\r\n            mailUtenteLoggato = utente.getMail();\r\n            Log.d(\"mailutenteLoggato\", mailUtenteLoggato);\r\n        } else {\r\n            SharedPreferences prefs1 = mainActivity.getApplicationContext().getSharedPreferences(\"LoginTemporaneo\",Context.MODE_PRIVATE);\r\n            mailUtenteLoggato = prefs1.getString(\"mail\", \"no\");\r\n            Log.d(\"mail\", mailUtenteLoggato);\r\n        }\r\n        return mailUtenteLoggato;\r\n    }\r\n\r\n    private void caricaImgDaStorage(String directory, String idImmagine) {\r\n        storageRef.child(directory + \"/\" + idImmagine).getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n            @Override\r\n            public void onSuccess(Uri uri) {\r\n                ImageView imageView = mainActivity.findViewById(R.id.imgUser);\r\n                String sUrl = uri.toString(); //otteniamo il token del'immagine\r\n                Log.d(\"sUrl\", sUrl);\r\n                Picasso.get().load(sUrl).into(imageView);\r\n\r\n                Drawable d = imageView.getDrawable();\r\n                bitMap = Bitmap.createBitmap(d.getIntrinsicWidth(), d.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                Log.d(\"OnFailure Exception\", String.valueOf(e));\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/contagiapp/notifiche/Notifiche.java	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
+++ app/src/main/java/com/example/contagiapp/notifiche/Notifiche.java	(date 1635243464872)
@@ -1,7 +1,9 @@
 package com.example.contagiapp.notifiche;
 
 import android.app.Notification;
+import android.app.PendingIntent;
 import android.content.Context;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
@@ -16,6 +18,7 @@
 import com.example.contagiapp.MainActivity;
 import com.example.contagiapp.R;
 import com.example.contagiapp.eventi.Evento;
+import com.example.contagiapp.eventi.ProfiloEventoFragment;
 import com.example.contagiapp.gruppi.Gruppo;
 import com.example.contagiapp.utente.Utente;
 import com.google.android.gms.tasks.OnCompleteListener;
@@ -176,11 +179,25 @@
 
                             //86400000 millisecondi = 1 giorno
                             if((dataAttuale.getTime() - dataEvento.getTime()) <= 86400000) {
+
+                                Intent notifyIntent = new Intent(mainActivity, Smistamento.class);
+                                notifyIntent.putExtra("fragment", "evento");
+                                notifyIntent.putExtra("id", evento.getIdEvento());
+
+                                // Set the Activity to start in a new, empty task
+                                //notifyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
+
+                                // Create the PendingIntent
+                                PendingIntent notifyPendingIntent = PendingIntent.getActivity(
+                                        mainActivity, 0, notifyIntent, PendingIntent.FLAG_UPDATE_CURRENT
+                                );
+
                                 Notification newMessageNotification1 =
                                         new NotificationCompat.Builder(mainActivity, "CHANNEL_ID")
                                                 .setSmallIcon(R.drawable.ic_event_black_24dp)
                                                 .setSubText("Ti ricordiamo l'evento "+evento.getNome())
                                                 .setLargeIcon(bitMap)
+                                                .setContentIntent(notifyPendingIntent)
                                                 /*.setStyle(new NotificationCompat.BigPictureStyle()
                                                         .bigPicture(bitMap)
                                                         .bigLargeIcon(null))*/
Index: .idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23__Default_Changelist_.xml	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23__Default_Changelist_.xml	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_18_10_2021_18_23_[Default_Changelist]" date="1634574193197" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 18/10/2021 18:23 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23_[Default_Changelist]/shelved.patch	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_18_10_2021_18_23_[Default_Changelist]/shelved.patch	(revision 51ace52b74b5be9f024db79254b9ae61f950a25a)
@@ -1,123 +0,0 @@
-Index: app/src/main/java/com/example/contagiapp/ui/login/LoginActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.contagiapp.ui.login;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.StringRes;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.contagiapp.MainActivity;\r\nimport com.example.contagiapp.R;\r\nimport com.example.contagiapp.WelcomeActivity;\r\nimport com.example.contagiapp.registrazione.RegistrationActivity;\r\nimport com.example.contagiapp.utente.Utente;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.textfield.TextInputEditText;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStream;\r\nimport java.io.OutputStreamWriter;\r\n\r\npublic class LoginActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG =\"LoginActivity\";\r\n    private LoginViewModel loginViewModel;\r\n    private TextInputEditText mailEditText;\r\n    private TextInputEditText passwordEditText;\r\n    private TextInputLayout mailTextLayout;\r\n    private TextInputLayout passwordTextLayout;\r\n    private boolean ricord;\r\n    private FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        loginViewModel = new ViewModelProvider(this, new LoginViewModelFactory())\r\n                .get(LoginViewModel.class);\r\n\r\n        mailEditText = findViewById(R.id.mail);\r\n        passwordEditText = findViewById(R.id.password);\r\n        mailTextLayout = findViewById(R.id.textFieldMail);\r\n        passwordTextLayout = findViewById(R.id.textFieldPassword);\r\n\r\n        final Button loginButton = findViewById(R.id.login);\r\n        final Button createAccountButton = findViewById(R.id.createAccount);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n\r\n        loginButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                if(controlloTextFieldVuoto(mailEditText, passwordEditText) == 0){\r\n                    mailTextLayout.setError(null);\r\n                    passwordTextLayout.setError(null);\r\n                    CheckBox ricordami = (CheckBox) findViewById(R.id.checkBox);\r\n                    ricord = ricordami.isChecked();\r\n                    openMain();\r\n                }\r\n            }\r\n        });\r\n\r\n        createAccountButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                openRegistration();\r\n            }\r\n        });\r\n    }\r\n\r\n    private int controlloTextFieldVuoto(TextInputEditText mailEditText, TextInputEditText passwordEditText){\r\n\r\n        if(isEmpty(mailEditText) == true && isEmpty(passwordEditText) == false ){\r\n            mailTextLayout.setError(\"Inserisci mail\");\r\n            passwordTextLayout.setError(null);\r\n            return 1;\r\n        }\r\n\r\n        if(isEmpty(passwordEditText) == true && isEmpty(mailEditText) == false){\r\n            passwordTextLayout.setError(\"Inserisci password\");\r\n            mailTextLayout.setError(null);\r\n            return 2;\r\n        }else\r\n            passwordTextLayout.setError(null);\r\n\r\n        if(isEmpty(mailEditText) && isEmpty(passwordEditText) == true){\r\n            mailTextLayout.setError(\"Inserisci mail\");\r\n            passwordTextLayout.setError(\"Inserisci password\");\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private boolean isEmpty(TextInputEditText etText) {\r\n        if(etText.getText().toString().length() > 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    private void updateUiWithUser(LoggedInUserView model) {\r\n        String welcome = getString(R.string.welcome) + model.getDisplayName();\r\n        // TODO : initiate successful logged in experience\r\n        Toast.makeText(getApplicationContext(), welcome, Toast.LENGTH_LONG).show();\r\n    }\r\n\r\n    private void showLoginFailed(@StringRes Integer errorString) {\r\n        Toast.makeText(getApplicationContext(), errorString, Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n\r\n    public void openMain(){\r\n        final String username = mailEditText.getText().toString();\r\n        final String password = passwordEditText.getText().toString();\r\n\r\n        //utente già registrato?\r\n        db.collection(\"Utenti\").whereEqualTo(\"mail\", username).whereEqualTo(\"password\",password)\r\n                .get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onSuccess(QuerySnapshot querySnapshots) {\r\n                if(querySnapshots.isEmpty()) {\r\n                    Toast.makeText(getApplicationContext(), \"Mail o password errati\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    //checkbox ricordami\r\n                    if(ricord) {\r\n                        db.collection(\"Utenti\").whereEqualTo(\"mail\", username).whereEqualTo(\"password\",password)\r\n                                .get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                            @Override\r\n                            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                                if (task.isSuccessful()) {\r\n                                    for (QueryDocumentSnapshot document : task.getResult()) {\r\n                                        Utente utente = document.toObject(Utente.class);\r\n\r\n                                        SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"Login\", MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = prefs.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String json = gson.toJson(utente);\r\n                                        editor.putString(\"utente\", json);\r\n                                        editor.commit ();\r\n                                    }\r\n                                } else {\r\n                                    Log.d(TAG, \"Error getting documents: \", task.getException());\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"LoginTemporaneo\", MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = prefs.edit();\r\n                        editor.putString(\"mail\", username);\r\n                        editor.commit ();\r\n                    }\r\n                    Intent mainIntent = new Intent(LoginActivity.this, MainActivity.class);\r\n                    startActivity(mainIntent);\r\n                    finish();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void openRegistration(){\r\n        Intent signUpIntent = new Intent(this, RegistrationActivity.class);\r\n        startActivity(signUpIntent);\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/contagiapp/ui/login/LoginActivity.java	(revision d6fc8831346e0dc00973800390dc2c7b54150366)
-+++ app/src/main/java/com/example/contagiapp/ui/login/LoginActivity.java	(date 1634572687167)
-@@ -159,6 +159,9 @@
-                                         String json = gson.toJson(utente);
-                                         editor.putString("utente", json);
-                                         editor.commit ();
-+                                        Intent mainIntent = new Intent(LoginActivity.this, MainActivity.class);
-+                                        startActivity(mainIntent);
-+                                        finish();
-                                     }
-                                 } else {
-                                     Log.d(TAG, "Error getting documents: ", task.getException());
-@@ -170,10 +173,10 @@
-                         SharedPreferences.Editor editor = prefs.edit();
-                         editor.putString("mail", username);
-                         editor.commit ();
--                    }
--                    Intent mainIntent = new Intent(LoginActivity.this, MainActivity.class);
--                    startActivity(mainIntent);
--                    finish();
-+                        Intent mainIntent = new Intent(LoginActivity.this, MainActivity.class);
-+                        startActivity(mainIntent);
-+                        finish();
-+                    }
-                 }
-             }
-         });
-Index: app/src/main/java/com/example/contagiapp/MainActivity.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.contagiapp;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\n\r\nimport android.Manifest;\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothManager;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Color;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.Settings;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.WindowManager;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.contagiapp.data.amici.FriendsFragment;\r\nimport com.example.contagiapp.eventi.EventsFragment;\r\nimport com.example.contagiapp.gruppi.GroupFragment;\r\nimport com.example.contagiapp.impostazioni.SettingActivity;\r\nimport com.example.contagiapp.notifiche.NotifyFragment;\r\nimport com.example.contagiapp.utente.ProfiloActivity;\r\nimport com.example.contagiapp.utente.Utente;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.gson.Gson;\r\nimport com.karumi.dexter.Dexter;\r\nimport com.karumi.dexter.PermissionToken;\r\nimport com.karumi.dexter.listener.PermissionDeniedResponse;\r\nimport com.karumi.dexter.listener.PermissionGrantedResponse;\r\nimport com.karumi.dexter.listener.PermissionRequest;\r\nimport com.karumi.dexter.listener.single.PermissionListener;\r\n\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private static final int PERMISSION_CODE = 0;\r\n    private static final int REQUEST_ENABLE_BT = 1;\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    String stato;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        checkMyPermission();\r\n        checkMyBL();\r\n\r\n        // Tiene lo schermo acceso\r\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n\r\n        /*\r\n        final BluetoothManager bluetoothManager = (BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);\r\n        BluetoothAdapter bluetoothAdapter = bluetoothManager.getAdapter();\r\n\r\n\r\n        if (!bluetoothAdapter.isEnabled()) {\r\n            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\r\n            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);\r\n            Toast.makeText(this,\"schifoso il signore\",Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n         */\r\n\r\n        BottomNavigationView bottomNavigationView = findViewById(R.id.bottomNav);\r\n\r\n        bottomNavigationView.setOnNavigationItemSelectedListener(bottomNavMethod);\r\n        getSupportFragmentManager().beginTransaction().replace(R.id.container, new HomeFragment()).commit();\r\n\r\n        getSupportFragmentManager().addOnBackStackChangedListener(new FragmentManager.OnBackStackChangedListener() {\r\n            @Override\r\n            public void onBackStackChanged() {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    //per bluetooth\r\n    private void checkMyBL(){\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            if (ContextCompat.checkSelfPermission(this,\r\n                    Manifest.permission.ACCESS_BACKGROUND_LOCATION)\r\n                    != PackageManager.PERMISSION_GRANTED) {\r\n                ActivityCompat.requestPermissions(\r\n                        MainActivity.this,\r\n                        new String[]{Manifest.permission.ACCESS_BACKGROUND_LOCATION},PERMISSION_CODE\r\n                        );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //per gps\r\n    private void checkMyPermission(){\r\n        Dexter.withActivity(this).withPermission(Manifest.permission.ACCESS_FINE_LOCATION).withListener(new PermissionListener() {\r\n            @Override\r\n            public void onPermissionGranted(PermissionGrantedResponse response) {\r\n                Toast.makeText(MainActivity.this, \"Permesso gps concesso\", Toast.LENGTH_SHORT).show();\r\n            }\r\n\r\n            @Override\r\n            public void onPermissionDenied(PermissionDeniedResponse response) {\r\n                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,\r\n                        Uri.fromParts(\"package\", getPackageName(), null));\r\n                startActivity(intent);\r\n            }\r\n\r\n            @Override\r\n            public void onPermissionRationaleShouldBeShown(PermissionRequest permission, PermissionToken token) {\r\n                token.continuePermissionRequest();\r\n            }\r\n        }).check();\r\n    }\r\n\r\n\r\n    //per aggiungere menu sulla actionBar\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu, menu);\r\n\r\n        SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"Login\", MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = prefs.getString(\"utente\", \"no\");\r\n        Utente utente;\r\n\r\n        if(!json.equals(\"no\")) {\r\n            utente = gson.fromJson(json, Utente.class);\r\n            stato = utente.getStato();\r\n        } else {\r\n            SharedPreferences prefs1 = getApplicationContext().getSharedPreferences(\"LoginTemporaneo\", MODE_PRIVATE);\r\n            String username = prefs1.getString(\"mail\", \"no\");\r\n            Log.d(\"username\", String.valueOf(username));\r\n\r\n            db.collection(\"Utenti\")\r\n                    .document(username)\r\n                    .get()\r\n                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                        @Override\r\n                        public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                            stato = documentSnapshot.getString(\"stato\");\r\n                        }\r\n                    });\r\n        }\r\n\r\n        Drawable draw = menu.getItem(0).getIcon();\r\n        draw.mutate();\r\n\r\n        draw.setColorFilter(Color.GRAY, PorterDuff.Mode.SRC_IN);\r\n        if(stato.equals(\"rosso\")) draw.setColorFilter(Color.RED, PorterDuff.Mode.SRC_IN);\r\n        if(stato.equals(\"verde\")) draw.setColorFilter(Color.GREEN, PorterDuff.Mode.SRC_IN);\r\n        if(stato.equals(\"arancione\")) draw.setColorFilter(Color.rgb(255, 165, 0), PorterDuff.Mode.SRC_IN);\r\n        if(stato.equals(\"giallo\")) draw.setColorFilter(Color.YELLOW, PorterDuff.Mode.SRC_IN);\r\n\r\n        return super.onCreateOptionsMenu(menu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        int id = item.getItemId();\r\n\r\n\r\n        if(id == R.id.nav_setting){\r\n            //getSupportFragmentManager().beginTransaction().replace(R.id.container, SettingFragment).commit();\r\n            Intent settingIntent = new Intent(this, SettingActivity.class);\r\n            startActivity(settingIntent);\r\n        }\r\n\r\n        if(id == R.id.nav_account){\r\n            Intent profiloIntent = new Intent(this, ProfiloActivity.class);\r\n            startActivity(profiloIntent);\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    //Per ottenere la barra di navigazione in basso\r\n    private BottomNavigationView.OnNavigationItemSelectedListener bottomNavMethod = new\r\n            BottomNavigationView.OnNavigationItemSelectedListener() {\r\n                @Override\r\n                public boolean onNavigationItemSelected(@NonNull MenuItem menuitem) {\r\n\r\n                    Fragment fragment=null;\r\n\r\n                    switch (menuitem.getItemId())\r\n                    {\r\n                        case R.id.nav_group:\r\n                            fragment = new GroupFragment();\r\n                            break;\r\n\r\n                        case R.id.nav_home:\r\n                            fragment = new HomeFragment();\r\n                            break;\r\n\r\n                        case R.id.nav_notify:\r\n                            fragment = new NotifyFragment();\r\n                            break;\r\n\r\n                        case R.id.nav_events:\r\n                            fragment = new EventsFragment();\r\n                            break;\r\n\r\n                        case R.id.nav_friends:\r\n                            fragment = new FriendsFragment();\r\n                            break;\r\n\r\n                    }\r\n                    getSupportFragmentManager().beginTransaction().replace(R.id.container, fragment).commit();\r\n                    return true;\r\n                }\r\n            };\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/contagiapp/MainActivity.java	(revision d6fc8831346e0dc00973800390dc2c7b54150366)
-+++ app/src/main/java/com/example/contagiapp/MainActivity.java	(date 1634574183045)
-@@ -36,10 +36,14 @@
- import com.example.contagiapp.notifiche.NotifyFragment;
- import com.example.contagiapp.utente.ProfiloActivity;
- import com.example.contagiapp.utente.Utente;
-+import com.google.android.gms.tasks.OnCompleteListener;
- import com.google.android.gms.tasks.OnSuccessListener;
-+import com.google.android.gms.tasks.Task;
- import com.google.android.material.bottomnavigation.BottomNavigationView;
- import com.google.firebase.firestore.DocumentSnapshot;
- import com.google.firebase.firestore.FirebaseFirestore;
-+import com.google.firebase.firestore.QueryDocumentSnapshot;
-+import com.google.firebase.firestore.QuerySnapshot;
- import com.google.gson.Gson;
- import com.karumi.dexter.Dexter;
- import com.karumi.dexter.PermissionToken;
-@@ -53,7 +57,7 @@
- 
-     private static final int PERMISSION_CODE = 0;
-     private static final int REQUEST_ENABLE_BT = 1;
--    FirebaseFirestore db = FirebaseFirestore.getInstance();
-+    private FirebaseFirestore db = FirebaseFirestore.getInstance();
-     String stato;
- 
-     @Override
-@@ -148,15 +152,30 @@
-         } else {
-             SharedPreferences prefs1 = getApplicationContext().getSharedPreferences("LoginTemporaneo", MODE_PRIVATE);
-             String username = prefs1.getString("mail", "no");
--            Log.d("username", String.valueOf(username));
-+            //Log.d("username", username);
- 
--            db.collection("Utenti")
--                    .document(username)
--                    .get()
--                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
--                        @Override
--                        public void onSuccess(DocumentSnapshot documentSnapshot) {
--                            stato = documentSnapshot.getString("stato");
-+            do {
-+                db.collection("Utenti")
-+                        .document(username)
-+                        .get()
-+                        .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
-+                            @Override
-+                            public void onSuccess(DocumentSnapshot documentSnapshot) {
-+                                stato = documentSnapshot.getString("stato");
-+                                Log.d("stato", stato);
-+                            }
-+                        });
-+            } while(stato == null);
-+
-+            db.collection("Utenti").whereEqualTo("mailPath", utente.getMail()).get()
-+                    .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
-+                        @Override
-+                        public void onComplete(@NonNull Task<QuerySnapshot> task) {
-+                            if(task.isSuccessful()) {
-+                                for (QueryDocumentSnapshot document : task.getResult()) {
-+                                    utente = document.toObject(Utente.class);
-+                                }
-+                            }
-                         }
-                     });
-         }
-Index: app/src/main/java/com/example/contagiapp/HomeFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.contagiapp;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.contagiapp.eventi.EventsFragment;\r\nimport com.example.contagiapp.eventi.NewEventsActivity;\r\nimport com.example.contagiapp.utente.Utente;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.material.button.MaterialButton;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\nimport es.dmoral.toasty.Toasty;\r\n\r\nimport static com.example.contagiapp.R.color.cardview_shadow_end_color;\r\nimport static com.example.contagiapp.R.color.quantum_yellow;\r\n\r\npublic class HomeFragment extends Fragment {\r\n\r\n    private FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    private LinearLayout status;\r\n    private MaterialButton btnSearchEvents;\r\n    private  MaterialButton btnCreateEvents;\r\n    private TextView tvStatusDescr;\r\n    private String statoUtente;\r\n\r\n    ColorStateList red = ColorStateList.valueOf(Color.parseColor(\"#FF0000\"));\r\n    ColorStateList yellow = ColorStateList.valueOf(Color.parseColor(\"#FFF8F405\"));\r\n    ColorStateList green = ColorStateList.valueOf(Color.parseColor(\"#FF43A047\"));\r\n\r\n    public HomeFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view;\r\n        view = inflater.inflate(R.layout.fragment_home, container, false);\r\n        btnCreateEvents = view.findViewById(R.id.btnCreateEvent);\r\n        btnSearchEvents = view.findViewById(R.id.btnSearchEvent);\r\n        status = view.findViewById(R.id.statusCircle2);\r\n        tvStatusDescr = view.findViewById(R.id.tvStatusDescription);\r\n\r\n\r\n        btnCreateEvents.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(getActivity(), NewEventsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        btnSearchEvents.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                //richiamo il fragment\r\n                Fragment fragment = new EventsFragment();\r\n                FragmentTransaction fr = getActivity().getSupportFragmentManager().beginTransaction();\r\n                fr.replace(R.id.container,fragment);\r\n                fr.addToBackStack(null); //serve per tornare al fragment precedente\r\n                fr.commit();\r\n            }\r\n        });\r\n\r\n        boolean caricato;\r\n        do {\r\n            try {\r\n                caricato = false;\r\n                db.collection(\"Utenti\")\r\n                        .document(getMailUtenteLoggato())\r\n                        .get()\r\n                        .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                            @Override\r\n                            public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                                Utente utente = documentSnapshot.toObject(Utente.class);\r\n                                String stato = utente.getStato();\r\n                                String dataStato = utente.getDataPositivita();\r\n\r\n                                if(!statoUtente.equals(stato)) setStato(stato, dataStato);\r\n\r\n\r\n                                switch (stato){//TODO modificare i messaggi in tvStatusDEscr\r\n                                    case \"rosso\" : status.setBackgroundTintList(red);\r\n                                        tvStatusDescr.setText(getString(R.string.DescrStatoRosso));\r\n                                        break;\r\n\r\n                                    case \"verde\" : status.setBackgroundTintList(green);\r\n                                        tvStatusDescr.setText(getString(R.string.DescrStatoVerde));\r\n                                        break;\r\n\r\n                                    case \"giallo\" : status.setBackgroundTintList(yellow);\r\n                                        tvStatusDescr.setText(getString(R.string.DescrStatoGiallo));\r\n                                        break;\r\n\r\n                                    case \"arancione\" :\r\n                                        try {\r\n                                            Date dataPositivita = new SimpleDateFormat(\"dd/MM/yyyy\").parse(dataStato);\r\n                                            Date dataAttuale = new Date(System.currentTimeMillis());\r\n\r\n                                            SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n                                            String stringDataAttuale = sdf.format(dataAttuale);\r\n\r\n                                            //864000000 millisecondi = 10 giorni\r\n                                            if(dataAttuale.getTime() - dataPositivita.getTime() >= 864000000) {\r\n                                                db.collection(\"Utenti\").document(getMailUtenteLoggato()).update(\"stato\", \"giallo\", \"dataPositivita\", stringDataAttuale);\r\n                                                status.setBackgroundTintList(yellow);\r\n                                                setStato(\"giallo\", stringDataAttuale);\r\n                                            } else status.setBackgroundTintList(ColorStateList.valueOf(Color.rgb(255, 165, 0)));\r\n                                        } catch (ParseException e) {\r\n                                            e.printStackTrace();\r\n                                        }\r\n                                        break;\r\n\r\n                                    default:\r\n                                        //toDo: inserire errore per lo stato\r\n                                }\r\n\r\n                            }\r\n                        });\r\n\r\n            } catch (NullPointerException e) {\r\n                caricato = true;\r\n            }\r\n        }while(caricato);\r\n        return view;\r\n    }\r\n\r\n    private String getMailUtenteLoggato(){\r\n        Utente utente;\r\n        Gson gson = new Gson();\r\n        SharedPreferences prefs = getActivity().getApplicationContext().getSharedPreferences(\"Login\", Context.MODE_PRIVATE);\r\n        String json = prefs.getString(\"utente\", \"no\");\r\n        String mailUtenteLoggato;\r\n        if(!json.equals(\"no\")) {\r\n            utente = gson.fromJson(json, Utente.class);\r\n            mailUtenteLoggato = utente.getMail();\r\n            Log.d(\"mailutenteLoggato\", mailUtenteLoggato);\r\n            statoUtente = utente.getStato();\r\n        } else {\r\n            SharedPreferences prefs1 = getActivity().getApplicationContext().getSharedPreferences(\"LoginTemporaneo\",Context.MODE_PRIVATE);\r\n            mailUtenteLoggato = prefs1.getString(\"mail\", \"no\");\r\n            Log.d(\"mail\", mailUtenteLoggato);\r\n\r\n            db.collection(\"Utenti\")\r\n                    .document(mailUtenteLoggato)\r\n                    .get()\r\n                    .addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\r\n                @Override\r\n                public void onSuccess(DocumentSnapshot documentSnapshot) {\r\n                    statoUtente = documentSnapshot.getString(\"stato\");\r\n                }\r\n            });\r\n        }\r\n        return mailUtenteLoggato;\r\n    }\r\n\r\n    private void setStato(String stato, String dataPos) {\r\n        SharedPreferences prefs = getActivity().getApplicationContext().getSharedPreferences(\"Login\", Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = prefs.getString(\"utente\", \"no\");\r\n        Utente utente;\r\n\r\n        if(!json.equals(\"no\")) {\r\n            utente = gson.fromJson(json, Utente.class);\r\n            utente.setStato(stato);\r\n            utente.setDataPositivita(dataPos);\r\n\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            String json1 = gson.toJson(utente);\r\n            editor.putString(\"utente\", json1);\r\n            editor.apply();\r\n        }\r\n\r\n        Toasty.success(getContext(), \"Stato aggiornato\", Toast.LENGTH_LONG).show();\r\n        Intent i = new Intent(getActivity(),MainActivity.class);\r\n        startActivity(i);\r\n    }\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/contagiapp/HomeFragment.java	(revision d6fc8831346e0dc00973800390dc2c7b54150366)
-+++ app/src/main/java/com/example/contagiapp/HomeFragment.java	(date 1634572109893)
-@@ -94,6 +94,7 @@
-         do {
-             try {
-                 caricato = false;
-+                String mail = getMailUtenteLoggato();
-                 db.collection("Utenti")
-                         .document(getMailUtenteLoggato())
-                         .get()
Index: app/src/main/java/com/example/contagiapp/notifiche/Smistamento.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/contagiapp/notifiche/Smistamento.java	(date 1635248861153)
+++ app/src/main/java/com/example/contagiapp/notifiche/Smistamento.java	(date 1635248861153)
@@ -0,0 +1,43 @@
+package com.example.contagiapp.notifiche;
+
+import android.annotation.SuppressLint;
+import android.os.Bundle;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
+
+import com.example.contagiapp.R;
+import com.example.contagiapp.eventi.EliminazionePartecipazioneEvento;
+import com.example.contagiapp.eventi.ProfiloEventoFragment;
+import com.example.contagiapp.gruppi.ProfiloGruppoFragment;
+
+public class Smistamento extends AppCompatActivity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        String fragment = getIntent().getExtras().getString("fragment");
+        String id = getIntent().getExtras().getString("id");
+
+        Fragment fragment1 = null;
+        Bundle bundle = new Bundle();
+
+        switch (fragment) {
+            case "evento":
+                fragment1 = new EliminazionePartecipazioneEvento();
+                bundle.putBoolean("partenza", false);
+                bundle.putString("idEvento", id);
+                break;
+            case "gruppo":
+                fragment1 = new ProfiloGruppoFragment();
+                bundle.putString("idGruppo", id);
+                break;
+                //per amico basta passare direttamente l'intent dalla notifica
+        }//TODO quando torno indietro l'app si chiude
+
+        fragment1.setArguments(bundle);
+        getSupportFragmentManager().beginTransaction().replace(android.R.id.content, fragment1).commit();
+        //finish();
+    }
+}
